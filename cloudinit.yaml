Content-Type: multipart/mixed; boundary="--=============0035287898381899620=="
MIME-Version: 1.0
 
--===============0035287898381899620==
Content-Type: text/cloud-config; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment; filename="cloud-config.txt"
 
#cloud-config
# content inspired by this very helpful article:
# http://www.knowceantech.com/2014/03/amazon-cloud-bootstrap-with-userdata-cloudinit-github-puppet/
# and the wonderful Vagrant-DSpace project (to which it is my pleasure to be a contributor)
# https://github.com/dspace/vagrant-dspace

# Cloud-Init Hints:
# * Some default settings are in /etc/cloud/cloud.cfg
# * Some examples at: http://cloudinit.readthedocs.org/en/latest/topics/examples.html
# * more info: https://help.ubuntu.com/community/CloudInit
 
preserve_hostname: true
manage_etc_hosts: false
 
# dynamically set hostname using the instance's instanceid
bootcmd:
 - cloud-init-per instance my_set_hostname sh -xc "echo hardyoyo-devops-$INSTANCE_ID > /etc/hostname; hostname -F /etc/hostname"

# Add apt repositories
apt_sources:
 # Enable "multiverse" repos
 - source: deb $MIRROR $RELEASE multiverse
 - source: deb-src $MIRROR $RELEASE multiverse
 - source: deb $MIRROR $RELEASE-updates multiverse
 - source: deb-src $MIRROR $RELEASE-updates multiverse
 - source: deb http://security.ubuntu.com/ubuntu $RELEASE-security multiverse
 - source: deb-src http://security.ubuntu.com/ubuntu $RELEASE-security multiverse
 # Enable "partner" repos
 - source: deb http://archive.canonical.com/ubuntu $RELEASE partner
 - source: deb-src http://archive.canonical.com/ubuntu $RELEASE partner
 # Enable PuppetLabs repos (for latest version of puppet)
 - source: deb http://apt.puppetlabs.com $RELEASE main dependencies
   keyid: 4BD6EC30    # GPG key ID published on a key server
   filename: puppetlabs.list
 - source: deb-src http://apt.puppetlabs.com $RELEASE main dependencies
   keyid: 4BD6EC30    # GPG key ID published on a key server
   filename: puppetlabs.list
 
# Run 'apt-get update' on first boot
apt_update: true
 
# Run 'apt-get upgrade' on first boot
apt_upgrade: true
 
# Reboot after package install/upgrade if needed (e.g. if kernel update)
# normally it's a good idea to set this to True, but let's set it to false until things settle down
apt_reboot_if_required: False
 
# Install additional packages on first boot
packages:
 - wget
 - git
 - puppet
 - rubygems-integration   # Used to install librarian-puppet
 - python-pip # Used to install awscli
 - rcconf # Used to set runlevels of services
 - unzip # comes in handy 
 - authbind # Used by Tomcat to bind to a priveleged port
 - tomcat6 
 
# run commands
# runcmd contains a list of either lists or a string
# each item will be executed in order
runcmd:
 # Install AWS CLI
 - pip install awscli
 # Add github.com to known_hosts
 - ssh -T -oStrictHostKeyChecking=no git@github.com

# copy the tomcat-users.xml file from my tomcat-users bucket on S3
- aws --region us-east-1 s3cp s3://tomcat-users/tomcat-users.xml /root/tomcat-users.xml


# set the locale
locale: en_US.UTF-8
 
# timezone: set the timezone for this instance
timezone: UTC
 
# Log all cloud-init process output (info & errors) to a logfile
output: {all: ">> /var/log/cloud-init-output.log"}
 
# final_message written to log when cloud-init processes are finished
final_message: "System boot (via cloud-init) is COMPLETE, after $UPTIME seconds. Finished at $TIMESTAMP"
 
--===============0035287898381899620==
Content-Type: text/x-shellscript; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment; filename="user-script.txt"
 
#!/bin/bash

# ensure puppet actually turns on
mv /etc/default/puppet /etc/default/puppet.orig
echo "START=yes" > /etc/default/puppet

# move the original puppet config out of the way
mv /etc/puppet /etc/puppet.orig

# clone my puppet config
git clone -b master http://github.com/hardyoyo/fedora-puppet.git /etc/puppet/

# Install 'librarian-puppet' and all third-party modules configured in 'Puppetfile'
if [ "$(gem search -i librarian-puppet)" = "false" ]; then
  echo "Installing librarian-puppet..."
  gem install librarian-puppet --version 1.0.3 >/dev/null
  echo "librarian-puppet installed!"
  echo "Installing third-party Puppet modules (via librarian-puppet)..."
  cd /etc/puppet && HOME=/root librarian-puppet install --no-destructive --verbose
else
  echo "Updating third-party Puppet modules (via librarian-puppet)..."
  cd /etc/puppet && HOME=/root librarian-puppet update --no-destructive --verbose
fi

# Run puppet 
puppet apply -tvd /etc/puppet/manifests/site.pp

# cp tomcat-users to its proper place
cp /root/tomcat-users.xml /etc/tomcat6/tomcat-users.xml

# Restart tomcat so all new configs from Puppet are picked up
service tomcat6 restart


--===============0035287898381899620==--
